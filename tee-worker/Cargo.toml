[workspace]
resolver = "2"
members = [
    # common
    "common/core-primitives/sgx/crypto",
    "common/core-primitives/sgx/io",
    "common/core-primitives/sgx/temp-dir",
    "common/core-primitives/substrate-sgx/environmental",
    "common/core-primitives/substrate-sgx/externalities",
    "common/core-primitives/substrate-sgx/sp-io",
    "common/core-primitives/node-api",
    "common/core-primitives/node-api/api-client-extensions",
    "common/core-primitives/node-api/api-client-types",
    "common/core-primitives/node-api/factory",
    "common/core-primitives/node-api/metadata",
    "common/core-primitives/node-api/metadata-provider",
    "common/core-primitives/*",

    "common/litentry/core/parachain-extrinsic-task/sender",
    "common/litentry/core/parachain-extrinsic-task/receiver",
    "common/litentry/core/teebag-storage",
    "common/litentry/macros",
    "common/litentry/pallets/*",
    "common/litentry/primitives",

    "common/core/parentchain/light-client",
    "common/core/parentchain/test",
    "common/core/rest-client",
    "common/core/rpc-client",
    "common/core/tls-websocket-server",

    # identity-worker
    "identity/app-libs/*",
    "identity/cli",
    "identity/core/parentchain/block-import-dispatcher",
    "identity/core/parentchain/block-importer",
    "identity/core/parentchain/indirect-calls-executor",
    "identity/core/parentchain/parentchain-crate",
    "identity/core/direct-rpc-client",
    "identity/core/direct-rpc-server",
    "identity/core/offchain-worker-executor",
    "identity/core/peer-top-broadcaster",
    "identity/core/rpc-server",
    "identity/core-primitives/stf-executor",
    "identity/core-primitives/top-pool",
    "identity/core-primitives/top-pool-author",
    "identity/core-primitives/enclave-api",
    "identity/core-primitives/enclave-api/ffi",
    "identity/service",
    "identity/litentry/core/assertion-build",
    "identity/litentry/core/assertion-build-v2",
    "identity/litentry/core/common",
    "identity/litentry/core/data-providers",
    "identity/litentry/core/vc-task/sender",
    "identity/litentry/core/vc-task/receiver",
    "identity/litentry/core/native-task/sender",
    "identity/litentry/core/native-task/receiver",
    "identity/litentry/core/identity-verification",
    "identity/litentry/core/omni-account",
    "identity/litentry/core/stf-task/sender",
    "identity/litentry/core/stf-task/receiver",
    "identity/litentry/core/service",
    "identity/litentry/core/mock-server",
    "identity/litentry/core/credentials-v2",
    "identity/litentry/core/credentials",
    "identity/litentry/core/dynamic-assertion",
    "identity/litentry/core/evm-dynamic-assertions",
    "identity/sidechain/*",
    "identity/sidechain/consensus/slots",
    "identity/sidechain/consensus/common",
    "identity/sidechain/consensus/aura",

    # bitacross-worker
    "bitacross/app-libs/*",
    "bitacross/cli",
    "bitacross/core/parentchain/block-import-dispatcher",
    "bitacross/core/parentchain/block-importer",
    "bitacross/core/parentchain/indirect-calls-executor",
    "bitacross/core/parentchain/parentchain-crate",
    "bitacross/core/direct-rpc-client",
    "bitacross/core/direct-rpc-server",
    "bitacross/core/offchain-worker-executor",
    "bitacross/core-primitives/stf-executor",
    "bitacross/core-primitives/top-pool",
    "bitacross/core-primitives/top-pool-author",
    "bitacross/core-primitives/enclave-api",
    "bitacross/core-primitives/enclave-api/ffi",
    "bitacross/service",
    "bitacross/litentry/core/direct-call",
    "bitacross/bitacross/core/*",
]

exclude = [
    "common/core-primitives/sgx",
    "common/core-primitives/substrate-sgx",
    "identity/sidechain/consensus",

    # enclave-runtime needs to have its own workspace root for patching
    "identity/enclave-runtime",
    "bitacross/enclave-runtime",
]

[workspace.dependencies]

aes = { version = "0.6.0" }
byteorder = { version = "1.4.2", default-features = false }
thiserror = { version = "1.0" }
env_logger = { version = "0.10.0" }
log = { version = "0.4", default-features = false }
codec = { package = "parity-scale-codec", version = "=3.6.4", default-features = false, features = ["derive"] }
arrayvec = { version = "0.7.1", default-features = false }
bit-vec = { version = "0.6", default-features = false }
hex = { version = "0.4", default-features = false, features = ["alloc"] }
hex-literal = { version = "0.4" }
blake2-rfc = { version = "0.2.18", default-features = false }
itertools = { version = "0.10.1", default-features = false }
base58 = { version = "0.2", default-features = false }
base64 = { version = "0.13", default-features = false, features = ["alloc"] }
chrono = { version = "0.4.19", default-features = false, features = ["alloc"] }
derive_more = { version = "0.99" }
futures = { version = "0.3" }
rustls = { version = "0.19" }
serde = { version = "1.0", default-features = false, features = ["derive", "alloc"] }
serde_derive = { version = "1.0", default-features = false }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
webpki = { version = "0.21" }
hash-db = { version = "0.15.2", default-features = false }
bitcoin = { version = "0.31.0", default-features = false }
rand = { version = "0.7" }
ring = { version = "0.16.20", default-features = false }
scale-info = { version = "=2.11.0", default-features = false, features = ["derive"] }
secp256k1 = { version = "0.28.0", default-features = false }
ofb = { version = "0.4.0" }
lazy_static = { version = "1.1.0", features = ["spin_no_std"] }
threadpool = { version = "1.8.0" }
k256 = { version = "0.13.3", default-features = false }
ethabi = { version = "18.0.0", default-features = false }
evm = { version = "0.41.1", default-features = false, features = ["with-codec"] }
http = { version = "0.2" }
rust_decimal = { version = "1.35.0", default-features = false }
ss58-registry = { version = "1.40", default-features = false }
rust-base58 = { version = "0.0.4" }
primitive-types = { version = "0.12.1", default-features = false }
libsecp256k1 = { version = "0.7.0", default-features = false }
postcard = { version = "0.7.2", default-features = false, features = ["alloc"] }
jsonrpc-core = { version = "18" }
linked-hash-map = { version = "0.5.2" }
parity-util-mem = { version = "0.12.0", default-features = false }
mio = { version = "0.6.14" }
tungstenite = { version = "0.15.0" }
yasna = { version = "0.4" }
musig2 = { git = "https://github.com/kziemianek/musig2", branch = "master", features = ["k256"] }
rlp = { version = "0.5", default-features = false }
sha3 = { version = "0.10", default-features = false }

url = { git = "https://github.com/domenukk/rust-url", rev = "316c868", default-features = false, features = ["alloc", "no_std_net"] }
substrate-api-client = { git = "https://github.com/scs/substrate-api-client", branch = "polkadot-v0.9.42-tag-v0.14.0", default-features = false, features = ["sync-api"] }
substrate-client-keystore = { git = "https://github.com/scs/substrate-api-client.git", branch = "polkadot-v0.9.42-tag-v0.14.0" }

# substrate
finality-grandpa = { version = "0.16.0", default-features = false, features = ["derive-codec"] }
frame-metadata = { version = "15.1.0", features = ["v14"], default-features = false }
frame-system = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
frame-executive = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
frame-support = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
binary-merkle-tree = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-api = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-runtime = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-core = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-trie = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-io = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-keyring = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-keystore = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-std = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-state-machine = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-consensus-grandpa = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-consensus-slots = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-version = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
sp-application-crypto = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
pallet-balances = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
pallet-sudo = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
pallet-timestamp = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
pallet-transaction-payment = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }
pallet-evm = { git = "https://github.com/polkadot-evm/frontier", branch = "bar/polkadot-v0.9.42", default-features = false }

# SGX SDK
sgx_alloc = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_crypto_helper = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master", default-features = false }
sgx_libc = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_rand = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tcrypto = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tcrypto_helper = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tse = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tseal = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_trts = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tstd = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tunittest = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_types = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_ucrypto = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_urts = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_serialize = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_serialize_derive = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_serialize_derive_internals = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }


# SGX-ported crates
base64_sgx = { package = "base64", git = "https://github.com/mesalock-linux/rust-base64-sgx", rev = "sgx_1.1.3" }
chrono_sgx = { package = "chrono", git = "https://github.com/mesalock-linux/chrono-sgx" }
thiserror_sgx = { package = "thiserror", git = "https://github.com/mesalock-linux/thiserror-sgx", tag = "sgx_1.1.3" }
num-bigint = { git = "https://github.com/mesalock-linux/num-bigint-sgx" }
rustls_sgx = { package = "rustls", git = "https://github.com/mesalock-linux/rustls", tag = "sgx_1.1.3" }
serde_json_sgx = { package = "serde_json", git = "https://github.com/mesalock-linux/serde-json-sgx", tag = "sgx_1.1.3", features = ["preserve_order"] }
webpki-roots = { git = "https://github.com/mesalock-linux/webpki-roots", branch = "mesalock_sgx" }
webpki_sgx = { package = "webpki", git = "https://github.com/mesalock-linux/webpki", branch = "mesalock_sgx" }
yasna_sgx = { package = "yasna", git = "https://github.com/mesalock-linux/yasna.rs-sgx", rev = "sgx_1.1.3", default-features = false, features = ["bit-vec", "num-bigint", "chrono", "mesalock_sgx"] }
rand-sgx = { package = "rand", git = "https://github.com/mesalock-linux/rand-sgx", tag = "sgx_1.1.3", features = ["sgx_tstd"] }
rust-base58-sgx = { package = "rust-base58", git = "https://github.com/mesalock-linux/rust-base58-sgx", features = ["mesalock_sgx"] }
linked-hash-map_sgx = { package = "linked-hash-map", git = "https://github.com/mesalock-linux/linked-hash-map-sgx" }
mio_sgx = { package = "mio", git = "https://github.com/mesalock-linux/mio-sgx", tag = "sgx_1.1.3" }
futures_sgx = { package = "futures", git = "https://github.com/mesalock-linux/futures-rs-sgx" }
threadpool_sgx = { package = "threadpool", git = "https://github.com/mesalock-linux/rust-threadpool-sgx", tag = "sgx_1.1.3" }
rust-base58_sgx = { package = "rust-base58", git = "https://github.com/mesalock-linux/rust-base58-sgx", rev = "sgx_1.1.3", default-features = false, features = ["mesalock_sgx"] }
musig2_sgx = { package = "musig2", git = "https://github.com/kailai-wang/musig2", branch = "use-sha2-0.8", features = ["k256"] }

# Integritee patched libs
jsonrpc-core_sgx = { package = "jsonrpc-core", git = "https://github.com/scs/jsonrpc", branch = "no_std_v18", default-features = false }
httparse = { git = "https://github.com/integritee-network/httparse-sgx", branch = "sgx-experimental", default-features = false }
http_req = { git = "https://github.com/integritee-network/http_req", branch = "master", features = ["rust-tls"] }
http-sgx = { package = "http", git = "https://github.com/integritee-network/http-sgx", branch = "sgx-experimental" }
http_req-sgx = { package = "http_req", git = "https://github.com/integritee-network/http_req", default-features = false, features = ["rust-tls", "sgx"] }
rcgen = { git = "https://github.com/integritee-network/rcgen", default-features = false }
mio-extras = { git = "https://github.com/integritee-network/mio-extras-sgx", rev = "963234b", default-features = false }
tungstenite_sgx = { package = "tungstenite", git = "https://github.com/integritee-network/tungstenite-rs-sgx", branch = "sgx-experimental", features = ["rustls-tls-webpki-roots"] }

# local
itc-parentchain-light-client = { path = "common/core/parentchain/light-client", default-features = false }
itc-parentchain-test = { path = "common/core/parentchain/test", default-features = false }
itc-rest-client = { path = "common/core/rest-client", default-features = false }
itc-rpc-client = { path = "common/core/rpc-client" }
itc-tls-websocket-server = { path = "common/core/tls-websocket-server", default-features = false }

itp-attestation-handler = { path = "common/core-primitives/attestation-handler", default-features = false }
itp-import-queue = { path = "common/core-primitives/import-queue", default-features = false }
itp-storage = { path = "common/core-primitives/storage", default-features = false }
itp-types = { path = "common/core-primitives/types", default-features = false }
itp-utils = { path = "common/core-primitives/utils", default-features = false }
itp-sgx-crypto = { path = "common/core-primitives/sgx/crypto", default-features = false }
itp-sgx-io = { path = "common/core-primitives/sgx/io", default-features = false }
itp-sgx-temp-dir = { path = "common/core-primitives/sgx/temp-dir", default-features = false }
itp-sgx-externalities = { path = "common/core-primitives/substrate-sgx/externalities", default-features = false }
itp-stf-primitives = { path = "common/core-primitives/stf-primitives", default-features = false }
itp-sgx-runtime-primitives = { path = "common/core-primitives/sgx-runtime-primitives", default-features = false }
itp-time-utils = { path = "common/core-primitives/time-utils", default-features = false }
itp-settings = { path = "common/core-primitives/settings" }
itp-ocall-api = { path = "common/core-primitives/ocall-api", default-features = false }
itp-binary-merkle-tree = { path = "common/core-primitives/binary-merkle-tree", default-features = false }
itp-component-container = { path = "common/core-primitives/component-container", default-features = false }
itp-rpc = { path = "common/core-primitives/rpc", default-features = false }
itp-hashing = { path = "common/core-primitives/hashing", default-features = false }
itp-enclave-metrics = { path = "common/core-primitives/enclave-metrics", default-features = false }
itp-extrinsics-factory = { path = "common/core-primitives/extrinsics-factory", default-features = false }
itp-nonce-cache = { path = "common/core-primitives/nonce-cache", default-features = false }
itp-node-api = { path = "common/core-primitives/node-api", default-features = false }
itp-api-client-extensions = { path = "common/core-primitives/node-api/api-client-extensions" }
itp-api-client-types = { path = "common/core-primitives/node-api/api-client-types", default-features = false }
itp-node-api-factory = { path = "common/core-primitives/node-api/factory" }
itp-node-api-metadata = { path = "common/core-primitives/node-api/metadata", default-features = false }
itp-node-api-metadata-provider = { path = "common/core-primitives/node-api/metadata-provider", default-features = false }
itp-networking-utils = { path = "common/core-primitives/networking-utils", default-features = false }
itp-primitives-cache = { path = "common/core-primitives/primitives-cache", default-features = false }
itp-stf-interface = { path = "common/core-primitives/stf-interface", default-features = false }
itp-stf-state-handler = { path = "common/core-primitives/stf-state-handler", default-features = false }
itp-stf-state-observer = { path = "common/core-primitives/stf-state-observer", default-features = false }
itp-test = { path = "common/core-primitives/test", default-features = false }

# litentry
litentry-primitives = { path = "common/litentry/primitives", default-features = false }
litentry-worker-macros = { path = "common/litentry/macros" }
pallet-parentchain = { path = "common/litentry/pallets/parentchain", default-features = false }
pallet-identity-management-tee = { path = "common/litentry/pallets/identity-management", default-features = false }
lc-teebag-storage = { path = "common/litentry/core/teebag-storage", default-features = false }
lc-parachain-extrinsic-task-sender = { path = "common/litentry/core/parachain-extrinsic-task/sender", default-features = false }
lc-parachain-extrinsic-task-receiver = { path = "common/litentry/core/parachain-extrinsic-task/receiver", default-features = false }
litentry-hex-utils = { path = "../common/utils/hex", default-features = false }
litentry-macros = { path = "../common/primitives/core/macros" }
parentchain-primitives = { package = "core-primitives", path = "../common/primitives/core", default-features = false }

# identity
lc-assertion-build = { path = "identity/litentry/core/assertion-build", default-features = false }
lc-assertion-build-v2 = { path = "identity/litentry/core/assertion-build-v2", default-features = false }
lc-common = { path = "identity/litentry/core/common", default-features = false }
lc-credentials = { path = "identity/litentry/core/credentials", default-features = false }
lc-credentials-v2 = { path = "identity/litentry/core/credentials-v2", default-features = false }
lc-data-providers = { path = "identity/litentry/core/data-providers", default-features = false }
lc-dynamic-assertion = { path = "identity/litentry/core/dynamic-assertion", default-features = false }
lc-evm-dynamic-assertions = { path = "identity/litentry/core/evm-dynamic-assertions", default-features = false }
lc-identity-verification = { path = "identity/litentry/core/identity-verification", default-features = false }
lc-mock-server = { path = "identity/litentry/core/mock-server" }
lc-service = { path = "identity/litentry/core/service", default-features = false }
lc-stf-task-sender = { path = "identity/litentry/core/stf-task/sender", default-features = false }
lc-stf-task-receiver = { path = "identity/litentry/core/stf-task/receiver", default-features = false }
lc-vc-task-sender = { path = "identity/litentry/core/vc-task/sender", default-features = false }
lc-vc-task-receiver = { path = "identity/litentry/core/vc-task/receiver", default-features = false }
lc-omni-account = { path = "identity/litentry/core/omni-account", default-features = false }
lc-native-task-sender = { path = "identity/litentry/core/native-task/sender", default-features = false }
lc-native-task-receiver = { path = "identity/litentry/core/native-task/receiver", default-features = false }

itc-peer-top-broadcaster = { path = "identity/core/peer-top-broadcaster", default-features = false }
itc-rpc-server = { path = "identity/core/rpc-server", default-features = false }

its-block-composer = { path = "identity/sidechain/block-composer", default-features = false }
its-block-verification = { path = "identity/sidechain/block-verification", default-features = false }
its-consensus-common = { path = "identity/sidechain/consensus/common", default-features = false }
its-consensus-aura = { path = "identity/sidechain/consensus/aura", default-features = false }
its-consensus-slots = { path = "identity/sidechain/consensus/slots", default-features = false }
fork-tree = { path = "identity/sidechain/fork-tree", default-features = false }
its-peer-fetch = { path = "identity/sidechain/peer-fetch", default-features = false }
its-primitives = { path = "identity/sidechain/primitives", default-features = false, features = ["full_crypto"] }
its-rpc-handler = { path = "identity/sidechain/rpc-handler", default-features = false }
its-sidechain = { path = "identity/sidechain/sidechain-crate", default-features = false }
its-state = { path = "identity/sidechain/state", default-features = false }
its-storage = { path = "identity/sidechain/storage" }
its-test = { path = "identity/sidechain/test", default-features = false }
its-validateer-fetch = { path = "identity/sidechain/validateer-fetch", default-features = false }

[patch."https://github.com/paritytech/polkadot-sdk"]
frame-support = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42" }
sp-core = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42" }
sp-io = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42" }
sp-runtime = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42" }
sp-std = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42" }

[patch."https://github.com/paritytech/frontier"]
pallet-evm = { git = "https://github.com/polkadot-evm/frontier", branch = "bar/polkadot-v0.9.42" }

[patch."https://github.com/apache/teaclave-sgx-sdk.git"]
sgx_alloc = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_crypto_helper = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_libc = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_rand = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tcrypto = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_trts = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_tstd = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_types = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_ucrypto = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
sgx_urts = { git = "https://github.com/apache/incubator-teaclave-sgx-sdk", branch = "master" }
